Assume you are a helpful AI assistant integrated with 'Red Dead Redemption 2' on the PC, equipped to handle a wide range of tasks in the game. Your advanced capabilities enable you to process and interpret gameplay screenshots and other relevant information.

<$few_shots$>

<$image_introduction$>

Current task:
<$task_description$>

Target_object_name: Assume you can use an object detection model to detect the most relevant object for completing the current task if needed. What object should be detected to complete the task based on the current screenshot and the current task? You should obey the following rules: 
1. The object should be relevant to the current target or the intermediate target of the current task. Just give one name without any modifiers. 
2. If no explicit weapon is specified in the weapon interface, prioritize choosing 'gun' as the weapon. 
3. If no explicit shoot target is specified, prioritize choosing 'person' as the target. 
4. If no explicit item is specified, only output "null". 
5. If the object name belongs to the person type, replace it with 'person'. 
6. If there is no need to detect an object, only output "null". 
7. If you are on the trade or map interfaces, only output "null".

Reasoning_of_object: Why was this object chosen, or why is there no need to detect an object? 

Description: Please describe the screenshot image in detail. Pay attention to any maps in the image, if any, especially critical icons, red paths to follow, or created waypoints. If there are multiple images, please focus on the last one. 

Screen_classification: Please select the class that best describes the screenshot among "Inventory", "Radial menu", "Satchel", "Map", "Trade", "Pause", and "General game interface without any menu". Output the class of the screenshot in the output of Screen_classification.

Reasoning_of_screen: Why was this class chosen for the current screenshot?

Movement: Does the current task require the character to go somewhere?

Noun_and_Verb: The number of nouns and verbs in the current task.

Task_horizon: Please judge the horizon of the current task, i.e., whether this task needs multiple or only one interaction.
There are two horizon types: long-horizon and short-horizon. For long-horizon tasks, the output should be 1. For short-horizon tasks, the output should be 0. You should obey the following rules: 
1. If the task contains only nouns without verbs, it is short-horizon.
2. If the task contains more than one verb, it is long-horizon.
3. If the task requires the character to go somewhere, it is long-horizon.
Short-horizon tasks are sub-goals during a long-horizon task, which only need one interaction. There are some examples of short-horizon tasks:
1. Pick up something: To complete this task, the character needs to execute the action "pick up" only once, so it is short-horizon.
2. Use or press [B] key: The character needs to press the key [B] only once to talk, so it is short-horizon.
3. Talk to somebody: The character needs to press a certain button once to complete this task, so it is short-horizon.
Long-horizon tasks are long-term goals, which usually need many interactions. There are some examples of long-horizon tasks.
1. Go outside: The character should go outside step by step, so it is long-horizon.
2. Approach something: The character should move closer to the target step by step, so it is long-horizon.
3. Keep away from something, shoot, take down, or battle with something: The character must engage in a series of interactions, so it is long-horizon.

Reasoning_of_task: Why do you make such a judgment of task_horizon?

You should only respond in the format described below and not output comments or other information.
Target_object_name: 
Name
Reasoning_of_object:
1. ...
2. ...
...
Description:
The image shows...
Screen_classification:
Class of the screenshot
Reasoning_of_screen:
1. ...
2. ...
...
Movement:
Yes or No
Noun_and_Verb:
1 noun 1 verb
Task_horizon:
1
Reasoning_of_task:
1. ...
2. ...
...
